
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  hashedPassword: 'hashedPassword',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  username: 'username',
  displayName: 'displayName',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  bannerUrl: 'bannerUrl'
};

exports.Prisma.PageScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  slug: 'slug',
  title: 'title',
  blocks: 'blocks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  title: 'title',
  slug: 'slug',
  tagline: 'tagline',
  coverUrl: 'coverUrl',
  status: 'status',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChapterScalarFieldEnum = {
  id: 'id',
  bookId: 'bookId',
  index: 'index',
  title: 'title',
  content: 'content',
  markdown: 'markdown',
  isDraft: 'isDraft',
  publishedAt: 'publishedAt',
  version: 'version',
  publishRole: 'publishRole',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumCategoryScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  desc: 'desc'
};

exports.Prisma.ForumThreadScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  authorId: 'authorId',
  title: 'title',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  authorId: 'authorId',
  content: 'content',
  markdown: 'markdown',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  chapterId: 'chapterId',
  postId: 'postId',
  parentId: 'parentId',
  content: 'content',
  markdown: 'markdown',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug'
};

exports.Prisma.BookTagScalarFieldEnum = {
  bookId: 'bookId',
  tagId: 'tagId'
};

exports.Prisma.ThreadTagScalarFieldEnum = {
  threadId: 'threadId',
  tagId: 'tagId'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetType: 'targetType',
  targetId: 'targetId',
  emoji: 'emoji',
  createdAt: 'createdAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  userId: 'userId',
  bookId: 'bookId',
  threadId: 'threadId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  payload: 'payload',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.CollaboratorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bookId: 'bookId',
  pageId: 'pageId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TurnQueueScalarFieldEnum = {
  id: 'id',
  bookId: 'bookId',
  userId: 'userId',
  order: 'order',
  timeoutSec: 'timeoutSec',
  active: 'active'
};

exports.Prisma.EditAuditScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  chapterId: 'chapterId',
  postId: 'postId',
  diff: 'diff',
  createdAt: 'createdAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  key: 'key',
  description: 'description'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.BookStatus = exports.$Enums.BookStatus = {
  ONGOING: 'ONGOING',
  FINISHED: 'FINISHED',
  HIATUS: 'HIATUS'
};

exports.ReactionTarget = exports.$Enums.ReactionTarget = {
  CHAPTER: 'CHAPTER',
  POST: 'POST',
  COMMENT: 'COMMENT'
};

exports.CollabRole = exports.$Enums.CollabRole = {
  OWNER: 'OWNER',
  EDITOR: 'EDITOR',
  AUTHOR: 'AUTHOR',
  VIEWER: 'VIEWER'
};

exports.BookType = exports.$Enums.BookType = {
  SOLO: 'SOLO',
  COOP: 'COOP'
};

exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  Page: 'Page',
  Book: 'Book',
  Chapter: 'Chapter',
  ForumCategory: 'ForumCategory',
  ForumThread: 'ForumThread',
  ForumPost: 'ForumPost',
  Comment: 'Comment',
  Tag: 'Tag',
  BookTag: 'BookTag',
  ThreadTag: 'ThreadTag',
  Reaction: 'Reaction',
  Follow: 'Follow',
  Notification: 'Notification',
  Collaborator: 'Collaborator',
  TurnQueue: 'TurnQueue',
  EditAudit: 'EditAudit',
  Role: 'Role',
  Permission: 'Permission',
  UserRole: 'UserRole',
  RolePermission: 'RolePermission',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/inokentykonovalov/403forbidden/prisma/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/inokentykonovalov/403forbidden/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../.env"
  },
  "relativePath": "../../..",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ---------- Datasource & Generator ----------\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./src/generated/prisma\"\n}\n\n// ---------- Enums ----------\nenum BookStatus {\n  ONGOING\n  FINISHED\n  HIATUS\n}\n\nenum ReactionTarget {\n  CHAPTER\n  POST\n  COMMENT\n}\n\nenum CollabRole {\n  OWNER\n  EDITOR\n  AUTHOR\n  VIEWER\n}\n\nenum BookType {\n  SOLO\n  COOP\n}\n\n// ---------- Core ----------\nmodel User {\n  id             String    @id @default(cuid())\n  email          String    @unique\n  hashedPassword String?\n  createdAt      DateTime  @default(now())\n  updatedAt      DateTime  @updatedAt\n  accounts       Account[]\n  sessions       Session[]\n\n  profile       Profile?\n  roles         UserRole[]\n  books         Book[]\n  pages         Page[] // ‚Üê backref for Page.owner\n  threads       ForumThread[]\n  posts         ForumPost[]\n  comments      Comment[]\n  reactions     Reaction[]\n  follows       Follow[]       @relation(\"UserFollows\")\n  followers     Follow[]       @relation(\"UserFollowers\")\n  notifications Notification[]\n  collaborators Collaborator[]\n  editAudits    EditAudit[]\n  turns         TurnQueue[] // ‚Üê backref for TurnQueue.user\n}\n\nmodel Profile {\n  id          String  @id @default(cuid())\n  userId      String  @unique\n  user        User    @relation(fields: [userId], references: [id])\n  username    String  @unique\n  displayName String\n  bio         String?\n  avatarUrl   String?\n  bannerUrl   String?\n}\n\n// ---------- Pages ----------\nmodel Page {\n  id        String   @id @default(cuid())\n  ownerId   String\n  owner     User     @relation(fields: [ownerId], references: [id])\n  slug      String\n  title     String\n  blocks    Json?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  collaborators Collaborator[]\n\n  @@unique([ownerId, slug])\n}\n\n// ---------- Books & Chapters ----------\nmodel Book {\n  id        String     @id @default(cuid())\n  ownerId   String\n  owner     User       @relation(fields: [ownerId], references: [id])\n  title     String\n  slug      String\n  tagline   String?\n  coverUrl  String?\n  status    BookStatus @default(ONGOING)\n  type      BookType   @default(SOLO)\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n\n  chapters      Chapter[]\n  tags          BookTag[]\n  followers     Follow[]\n  collaborators Collaborator[]\n  turns         TurnQueue[]\n\n  @@unique([ownerId, slug])\n}\n\nmodel Chapter {\n  id          String      @id @default(cuid())\n  bookId      String\n  book        Book        @relation(fields: [bookId], references: [id])\n  index       Int\n  title       String\n  content     Json\n  markdown    String?\n  isDraft     Boolean     @default(true)\n  publishedAt DateTime?\n  version     Int         @default(1)\n  publishRole CollabRole?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  comments   Comment[]\n  editAudits EditAudit[] // ‚Üê backref for EditAudit.chapter\n\n  @@unique([bookId, index])\n  @@index([bookId, isDraft, publishedAt(sort: Desc)])\n}\n\n// ---------- Forum ----------\nmodel ForumCategory {\n  id      String        @id @default(cuid())\n  slug    String        @unique\n  title   String\n  desc    String?\n  threads ForumThread[]\n}\n\nmodel ForumThread {\n  id         String        @id @default(cuid())\n  categoryId String\n  category   ForumCategory @relation(fields: [categoryId], references: [id])\n  authorId   String\n  author     User          @relation(fields: [authorId], references: [id])\n  title      String\n  slug       String\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  posts         ForumPost[]\n  tags          ThreadTag[]\n  followsThread Follow[]    @relation(\"FollowThread\") // ‚Üê backref for Follow.thread\n\n  @@unique([categoryId, slug])\n  @@index([categoryId, createdAt])\n}\n\nmodel ForumPost {\n  id        String      @id @default(cuid())\n  threadId  String\n  thread    ForumThread @relation(fields: [threadId], references: [id])\n  authorId  String\n  author    User        @relation(fields: [authorId], references: [id])\n  content   Json\n  markdown  String?\n  createdAt DateTime    @default(now())\n  updatedAt DateTime    @updatedAt\n\n  comments   Comment[]\n  editAudits EditAudit[] // ‚Üê backref for EditAudit.post\n\n  @@index([threadId, createdAt])\n}\n\n// ---------- Social ----------\nmodel Comment {\n  id       String @id @default(cuid())\n  authorId String\n  author   User   @relation(fields: [authorId], references: [id])\n\n  // polymorphic target\n  chapterId String?\n  chapter   Chapter?   @relation(fields: [chapterId], references: [id])\n  postId    String?\n  post      ForumPost? @relation(fields: [postId], references: [id])\n\n  parentId String?\n  parent   Comment?  @relation(\"CommentReplies\", fields: [parentId], references: [id])\n  replies  Comment[] @relation(\"CommentReplies\")\n\n  content   Json\n  markdown  String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Tag {\n  id         String      @id @default(cuid())\n  name       String      @unique\n  slug       String      @unique\n  bookTags   BookTag[] // ‚Üê backrefs\n  threadTags ThreadTag[]\n}\n\nmodel BookTag {\n  bookId String\n  tagId  String\n  book   Book   @relation(fields: [bookId], references: [id])\n  tag    Tag    @relation(fields: [tagId], references: [id])\n\n  @@id([bookId, tagId])\n}\n\nmodel ThreadTag {\n  threadId String\n  tagId    String\n  thread   ForumThread @relation(fields: [threadId], references: [id])\n  tag      Tag         @relation(fields: [tagId], references: [id])\n\n  @@id([threadId, tagId])\n}\n\nmodel Reaction {\n  id         String         @id @default(cuid())\n  userId     String\n  user       User           @relation(fields: [userId], references: [id])\n  targetType ReactionTarget\n  targetId   String\n  emoji      String         @default(\"like\")\n  createdAt  DateTime       @default(now())\n\n  @@unique([userId, targetType, targetId, emoji])\n}\n\nmodel Follow {\n  id         String @id @default(cuid())\n  followerId String\n  follower   User   @relation(\"UserFollows\", fields: [followerId], references: [id])\n\n  // targets\n  userId String?\n  user   User?   @relation(\"UserFollowers\", fields: [userId], references: [id])\n  bookId String?\n  book   Book?   @relation(fields: [bookId], references: [id])\n\n  threadId String?\n  thread   ForumThread? @relation(\"FollowThread\", fields: [threadId], references: [id])\n\n  createdAt DateTime @default(now())\n\n  @@unique([followerId, userId, bookId, threadId])\n}\n\nmodel Notification {\n  id        String    @id @default(cuid())\n  userId    String\n  user      User      @relation(fields: [userId], references: [id])\n  type      String\n  payload   Json\n  readAt    DateTime?\n  createdAt DateTime  @default(now())\n}\n\n// ---------- Collaboration ----------\nmodel Collaborator {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id])\n\n  // target: book or page\n  bookId String?\n  book   Book?   @relation(fields: [bookId], references: [id])\n  pageId String?\n  page   Page?   @relation(fields: [pageId], references: [id])\n\n  role      CollabRole\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n\n  @@unique([userId, bookId, pageId])\n}\n\nmodel TurnQueue {\n  id         String  @id @default(cuid())\n  bookId     String\n  book       Book    @relation(fields: [bookId], references: [id])\n  userId     String\n  user       User    @relation(fields: [userId], references: [id])\n  order      Int\n  timeoutSec Int     @default(172800) // 48h\n  active     Boolean @default(true)\n\n  @@unique([bookId, userId])\n  @@unique([bookId, order])\n}\n\nmodel EditAudit {\n  id        String     @id @default(cuid())\n  userId    String\n  user      User       @relation(fields: [userId], references: [id])\n  chapterId String?\n  chapter   Chapter?   @relation(fields: [chapterId], references: [id])\n  postId    String?\n  post      ForumPost? @relation(fields: [postId], references: [id])\n  diff      Json\n  createdAt DateTime   @default(now())\n}\n\n// ---------- RBAC ----------\nmodel Role {\n  id              String           @id @default(cuid())\n  name            String           @unique\n  userRoles       UserRole[]\n  rolePermissions RolePermission[]\n}\n\nmodel Permission {\n  id              String           @id @default(cuid())\n  key             String           @unique\n  description     String?\n  rolePermissions RolePermission[]\n}\n\nmodel UserRole {\n  userId String\n  roleId String\n  user   User   @relation(fields: [userId], references: [id])\n  role   Role   @relation(fields: [roleId], references: [id])\n\n  @@id([userId, roleId])\n}\n\nmodel RolePermission {\n  roleId       String\n  permissionId String\n  role         Role       @relation(fields: [roleId], references: [id])\n  permission   Permission @relation(fields: [permissionId], references: [id])\n\n  @@id([roleId, permissionId])\n}\n\n// ---------- NextAuth ----------\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  expires      DateTime\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n",
  "inlineSchemaHash": "10ca29314eeb1e519da23fec212fd00244eb5d3aa049c9a6936104456560caeb",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hashedPassword\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToUser\"},{\"name\":\"roles\",\"kind\":\"object\",\"type\":\"UserRole\",\"relationName\":\"UserToUserRole\"},{\"name\":\"books\",\"kind\":\"object\",\"type\":\"Book\",\"relationName\":\"BookToUser\"},{\"name\":\"pages\",\"kind\":\"object\",\"type\":\"Page\",\"relationName\":\"PageToUser\"},{\"name\":\"threads\",\"kind\":\"object\",\"type\":\"ForumThread\",\"relationName\":\"ForumThreadToUser\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"ForumPostToUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"reactions\",\"kind\":\"object\",\"type\":\"Reaction\",\"relationName\":\"ReactionToUser\"},{\"name\":\"follows\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"UserFollows\"},{\"name\":\"followers\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"UserFollowers\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"collaborators\",\"kind\":\"object\",\"type\":\"Collaborator\",\"relationName\":\"CollaboratorToUser\"},{\"name\":\"editAudits\",\"kind\":\"object\",\"type\":\"EditAudit\",\"relationName\":\"EditAuditToUser\"},{\"name\":\"turns\",\"kind\":\"object\",\"type\":\"TurnQueue\",\"relationName\":\"TurnQueueToUser\"}],\"dbName\":null},\"Profile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProfileToUser\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bannerUrl\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Page\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PageToUser\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blocks\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"collaborators\",\"kind\":\"object\",\"type\":\"Collaborator\",\"relationName\":\"CollaboratorToPage\"}],\"dbName\":null},\"Book\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BookToUser\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagline\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coverUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookStatus\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"BookType\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"chapters\",\"kind\":\"object\",\"type\":\"Chapter\",\"relationName\":\"BookToChapter\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"BookTag\",\"relationName\":\"BookToBookTag\"},{\"name\":\"followers\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"BookToFollow\"},{\"name\":\"collaborators\",\"kind\":\"object\",\"type\":\"Collaborator\",\"relationName\":\"BookToCollaborator\"},{\"name\":\"turns\",\"kind\":\"object\",\"type\":\"TurnQueue\",\"relationName\":\"BookToTurnQueue\"}],\"dbName\":null},\"Chapter\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"book\",\"kind\":\"object\",\"type\":\"Book\",\"relationName\":\"BookToChapter\"},{\"name\":\"index\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"markdown\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isDraft\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"version\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"publishRole\",\"kind\":\"enum\",\"type\":\"CollabRole\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"ChapterToComment\"},{\"name\":\"editAudits\",\"kind\":\"object\",\"type\":\"EditAudit\",\"relationName\":\"ChapterToEditAudit\"}],\"dbName\":null},\"ForumCategory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"desc\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"threads\",\"kind\":\"object\",\"type\":\"ForumThread\",\"relationName\":\"ForumCategoryToForumThread\"}],\"dbName\":null},\"ForumThread\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"ForumCategory\",\"relationName\":\"ForumCategoryToForumThread\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ForumThreadToUser\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"ForumPostToForumThread\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"ThreadTag\",\"relationName\":\"ForumThreadToThreadTag\"},{\"name\":\"followsThread\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"FollowThread\"}],\"dbName\":null},\"ForumPost\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"threadId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thread\",\"kind\":\"object\",\"type\":\"ForumThread\",\"relationName\":\"ForumPostToForumThread\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ForumPostToUser\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"markdown\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToForumPost\"},{\"name\":\"editAudits\",\"kind\":\"object\",\"type\":\"EditAudit\",\"relationName\":\"EditAuditToForumPost\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"chapterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chapter\",\"kind\":\"object\",\"type\":\"Chapter\",\"relationName\":\"ChapterToComment\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"CommentToForumPost\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentReplies\"},{\"name\":\"replies\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentReplies\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"markdown\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookTags\",\"kind\":\"object\",\"type\":\"BookTag\",\"relationName\":\"BookTagToTag\"},{\"name\":\"threadTags\",\"kind\":\"object\",\"type\":\"ThreadTag\",\"relationName\":\"TagToThreadTag\"}],\"dbName\":null},\"BookTag\":{\"fields\":[{\"name\":\"bookId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"book\",\"kind\":\"object\",\"type\":\"Book\",\"relationName\":\"BookToBookTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"BookTagToTag\"}],\"dbName\":null},\"ThreadTag\":{\"fields\":[{\"name\":\"threadId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thread\",\"kind\":\"object\",\"type\":\"ForumThread\",\"relationName\":\"ForumThreadToThreadTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"TagToThreadTag\"}],\"dbName\":null},\"Reaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReactionToUser\"},{\"name\":\"targetType\",\"kind\":\"enum\",\"type\":\"ReactionTarget\"},{\"name\":\"targetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emoji\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Follow\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"followerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"follower\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFollows\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFollowers\"},{\"name\":\"bookId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"book\",\"kind\":\"object\",\"type\":\"Book\",\"relationName\":\"BookToFollow\"},{\"name\":\"threadId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thread\",\"kind\":\"object\",\"type\":\"ForumThread\",\"relationName\":\"FollowThread\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"readAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Collaborator\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CollaboratorToUser\"},{\"name\":\"bookId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"book\",\"kind\":\"object\",\"type\":\"Book\",\"relationName\":\"BookToCollaborator\"},{\"name\":\"pageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"page\",\"kind\":\"object\",\"type\":\"Page\",\"relationName\":\"CollaboratorToPage\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"CollabRole\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TurnQueue\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"book\",\"kind\":\"object\",\"type\":\"Book\",\"relationName\":\"BookToTurnQueue\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TurnQueueToUser\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timeoutSec\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"EditAudit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EditAuditToUser\"},{\"name\":\"chapterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chapter\",\"kind\":\"object\",\"type\":\"Chapter\",\"relationName\":\"ChapterToEditAudit\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"EditAuditToForumPost\"},{\"name\":\"diff\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Role\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userRoles\",\"kind\":\"object\",\"type\":\"UserRole\",\"relationName\":\"RoleToUserRole\"},{\"name\":\"rolePermissions\",\"kind\":\"object\",\"type\":\"RolePermission\",\"relationName\":\"RoleToRolePermission\"}],\"dbName\":null},\"Permission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rolePermissions\",\"kind\":\"object\",\"type\":\"RolePermission\",\"relationName\":\"PermissionToRolePermission\"}],\"dbName\":null},\"UserRole\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserRole\"},{\"name\":\"role\",\"kind\":\"object\",\"type\":\"Role\",\"relationName\":\"RoleToUserRole\"}],\"dbName\":null},\"RolePermission\":{\"fields\":[{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"permissionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"object\",\"type\":\"Role\",\"relationName\":\"RoleToRolePermission\"},{\"name\":\"permission\",\"kind\":\"object\",\"type\":\"Permission\",\"relationName\":\"PermissionToRolePermission\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

