// ---------- Datasource & Generator ----------
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum BookStatus {
  ONGOING
  FINISHED
  HIATUS
}

enum ReactionTarget {
  CHAPTER
  POST
  COMMENT
}

enum CollabRole {
  OWNER
  EDITOR
  AUTHOR
  VIEWER
}

enum BookType {
  SOLO
  COOP
}

// ---------- Core ----------
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]

  profile       Profile?
  roles         UserRole[]
  books         Book[]
  pages         Page[]        // ← backref for Page.owner
  threads       ForumThread[]
  posts         ForumPost[]
  comments      Comment[]
  reactions     Reaction[]
  follows       Follow[] @relation("UserFollows")
  followers     Follow[] @relation("UserFollowers")
  notifications Notification[]
  collaborators Collaborator[]
  editAudits    EditAudit[]
  turns         TurnQueue[]   // ← backref for TurnQueue.user
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  username    String  @unique
  displayName String
  bio         String?
  avatarUrl   String?
  bannerUrl   String?
}

// ---------- Pages ----------
model Page {
  id        String   @id @default(cuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  slug      String
  title     String
  blocks    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collaborators Collaborator[]

  @@unique([ownerId, slug])
}

// ---------- Books & Chapters ----------
model Book {
  id           String     @id @default(cuid())
  ownerId      String
  owner        User       @relation(fields: [ownerId], references: [id])
  title        String
  slug         String
  tagline      String?
  coverUrl     String?
  status       BookStatus @default(ONGOING)
  type         BookType   @default(SOLO)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  chapters     Chapter[]
  tags         BookTag[]
  followers    Follow[]
  collaborators Collaborator[]
  turns        TurnQueue[]

  @@unique([ownerId, slug])
}

model Chapter {
  id          String    @id @default(cuid())
  bookId      String
  book        Book      @relation(fields: [bookId], references: [id])
  index       Int
  title       String
  content     Json
  markdown    String?
  isDraft     Boolean    @default(true)
  publishedAt DateTime?
  version     Int        @default(1)
  publishRole CollabRole?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  comments    Comment[]
  editAudits  EditAudit[]   // ← backref for EditAudit.chapter

  @@unique([bookId, index])
  @@index([bookId, isDraft, publishedAt(sort: Desc)])
}

// ---------- Forum ----------
model ForumCategory {
  id      String @id @default(cuid())
  slug    String @unique
  title   String
  desc    String?
  threads ForumThread[]
}

model ForumThread {
  id         String        @id @default(cuid())
  categoryId String
  category   ForumCategory @relation(fields: [categoryId], references: [id])
  authorId   String
  author     User          @relation(fields: [authorId], references: [id])
  title      String
  slug       String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  posts           ForumPost[]
  tags            ThreadTag[]
  followsThread   Follow[] @relation("FollowThread") // ← backref for Follow.thread

  @@unique([categoryId, slug])
  @@index([categoryId, createdAt])
}

model ForumPost {
  id        String      @id @default(cuid())
  threadId  String
  thread    ForumThread @relation(fields: [threadId], references: [id])
  authorId  String
  author    User        @relation(fields: [authorId], references: [id])
  content   Json
  markdown  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  comments   Comment[]
  editAudits EditAudit[]   // ← backref for EditAudit.post

  @@index([threadId, createdAt])
}

// ---------- Social ----------
model Comment {
  id        String   @id @default(cuid())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  // polymorphic target
  chapterId String?
  chapter   Chapter?  @relation(fields: [chapterId], references: [id])
  postId    String?
  post      ForumPost? @relation(fields: [postId], references: [id])

  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  content   Json
  markdown  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  bookTags  BookTag[]  // ← backrefs
  threadTags ThreadTag[]
}

model BookTag {
  bookId String
  tagId  String
  book   Book @relation(fields: [bookId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([bookId, tagId])
}

model ThreadTag {
  threadId String
  tagId    String
  thread   ForumThread @relation(fields: [threadId], references: [id])
  tag      Tag         @relation(fields: [tagId], references: [id])

  @@id([threadId, tagId])
}

model Reaction {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  targetType ReactionTarget
  targetId   String
  emoji      String         @default("like")
  createdAt  DateTime       @default(now())

  @@unique([userId, targetType, targetId, emoji])
}

model Follow {
  id         String  @id @default(cuid())
  followerId String
  follower   User    @relation("UserFollows", fields: [followerId], references: [id])

  // targets
  userId   String?
  user     User?       @relation("UserFollowers", fields: [userId], references: [id])
  bookId   String?
  book     Book?       @relation(fields: [bookId], references: [id])

  threadId String?
  thread   ForumThread? @relation("FollowThread", fields: [threadId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, userId, bookId, threadId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  payload   Json
  readAt    DateTime?
  createdAt DateTime @default(now())
}

// ---------- Collaboration ----------
model Collaborator {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])

  // target: book or page
  bookId    String?
  book      Book?      @relation(fields: [bookId], references: [id])
  pageId    String?
  page      Page?      @relation(fields: [pageId], references: [id])

  role      CollabRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId, pageId])
}

model TurnQueue {
  id         String   @id @default(cuid())
  bookId     String
  book       Book     @relation(fields: [bookId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  order      Int
  timeoutSec Int      @default(172800) // 48h
  active     Boolean  @default(true)

  @@unique([bookId, userId])
  @@unique([bookId, order])
}

model EditAudit {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  postId    String?
  post      ForumPost? @relation(fields: [postId], references: [id])
  diff      Json
  createdAt DateTime @default(now())
}

// ---------- RBAC ----------
model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id              String           @id @default(cuid())
  key             String           @unique
  description     String?
  rolePermissions RolePermission[]
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

// ---------- NextAuth ----------
model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
